#!/bin/bash

# Legal Document Analyzer - Cloud Run Deployment Script
# This script builds and deploys the FastAPI backend to Google Cloud Run

set -e  # Exit on any error

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Default values
PROJECT_ID=""
REGION="us-central1"
SERVICE_NAME="legal-doc-analyzer"
IMAGE_NAME="legal-doc-analyzer"
ENVIRONMENT="production"

# Function to print colored output
print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to show usage
show_usage() {
    echo "Usage: $0 -p PROJECT_ID [OPTIONS]"
    echo ""
    echo "Required:"
    echo "  -p, --project      Google Cloud Project ID"
    echo ""
    echo "Optional:"
    echo "  -r, --region       Google Cloud region (default: us-central1)"
    echo "  -s, --service      Cloud Run service name (default: legal-doc-analyzer)"
    echo "  -i, --image        Docker image name (default: legal-doc-analyzer)"
    echo "  -e, --environment  Environment (default: production)"
    echo "  -h, --help         Show this help message"
    echo ""
    echo "Example:"
    echo "  $0 -p my-project-id -r us-west1"
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -p|--project)
            PROJECT_ID="$2"
            shift 2
            ;;
        -r|--region)
            REGION="$2"
            shift 2
            ;;
        -s|--service)
            SERVICE_NAME="$2"
            shift 2
            ;;
        -i|--image)
            IMAGE_NAME="$2"
            shift 2
            ;;
        -e|--environment)
            ENVIRONMENT="$2"
            shift 2
            ;;
        -h|--help)
            show_usage
            exit 0
            ;;
        *)
            print_error "Unknown option: $1"
            show_usage
            exit 1
            ;;
    esac
done

# Validate required parameters
if [ -z "$PROJECT_ID" ]; then
    print_error "Project ID is required"
    show_usage
    exit 1
fi

# Set derived variables
IMAGE_URI="gcr.io/${PROJECT_ID}/${IMAGE_NAME}"
SERVICE_ACCOUNT="${SERVICE_NAME}-sa@${PROJECT_ID}.iam.gserviceaccount.com"

print_info "Starting deployment with the following configuration:"
echo "  Project ID: $PROJECT_ID"
echo "  Region: $REGION"
echo "  Service Name: $SERVICE_NAME"
echo "  Image Name: $IMAGE_NAME"
echo "  Image URI: $IMAGE_URI"
echo "  Environment: $ENVIRONMENT"
echo ""

# Step 1: Check prerequisites
print_info "Checking prerequisites..."

# Check if gcloud is installed
if ! command -v gcloud &> /dev/null; then
    print_error "gcloud CLI is not installed. Please install it first."
    exit 1
fi

# Check if Docker is installed
if ! command -v docker &> /dev/null; then
    print_error "Docker is not installed. Please install it first."
    exit 1
fi

# Check if authenticated with gcloud
if ! gcloud auth list --filter=status:ACTIVE --format="value(account)" | head -n1 > /dev/null; then
    print_error "Not authenticated with gcloud. Please run 'gcloud auth login' first."
    exit 1
fi

print_success "Prerequisites check passed"

# Step 2: Set up Google Cloud project
print_info "Setting up Google Cloud project..."

gcloud config set project $PROJECT_ID
gcloud config set run/region $REGION

# Enable required APIs
print_info "Enabling required APIs..."
gcloud services enable \
    run.googleapis.com \
    cloudbuild.googleapis.com \
    containerregistry.googleapis.com \
    documentai.googleapis.com \
    aiplatform.googleapis.com \
    storage.googleapis.com \
    firestore.googleapis.com \
    kms.googleapis.com \
    bigquery.googleapis.com \
    logging.googleapis.com \
    monitoring.googleapis.com \
    secretmanager.googleapis.com

print_success "APIs enabled"

# Step 3: Create service account (if it doesn't exist)
print_info "Creating service account..."

if ! gcloud iam service-accounts describe $SERVICE_ACCOUNT --quiet > /dev/null 2>&1; then
    gcloud iam service-accounts create ${SERVICE_NAME}-sa \
        --display-name="Legal Document Analyzer Service Account" \
        --description="Service account for Legal Document Analyzer backend"
    
    # Grant necessary roles
    print_info "Granting IAM roles to service account..."
    gcloud projects add-iam-policy-binding $PROJECT_ID \
        --member="serviceAccount:$SERVICE_ACCOUNT" \
        --role="roles/aiplatform.user"
    
    gcloud projects add-iam-policy-binding $PROJECT_ID \
        --member="serviceAccount:$SERVICE_ACCOUNT" \
        --role="roles/documentai.apiUser"
    
    gcloud projects add-iam-policy-binding $PROJECT_ID \
        --member="serviceAccount:$SERVICE_ACCOUNT" \
        --role="roles/storage.objectAdmin"
    
    gcloud projects add-iam-policy-binding $PROJECT_ID \
        --member="serviceAccount:$SERVICE_ACCOUNT" \
        --role="roles/datastore.user"
    
    gcloud projects add-iam-policy-binding $PROJECT_ID \
        --member="serviceAccount:$SERVICE_ACCOUNT" \
        --role="roles/bigquery.dataEditor"
    
    gcloud projects add-iam-policy-binding $PROJECT_ID \
        --member="serviceAccount:$SERVICE_ACCOUNT" \
        --role="roles/cloudkms.cryptoKeyEncrypterDecrypter"
    
    gcloud projects add-iam-policy-binding $PROJECT_ID \
        --member="serviceAccount:$SERVICE_ACCOUNT" \
        --role="roles/secretmanager.secretAccessor"
    
    print_success "Service account created and configured"
else
    print_info "Service account already exists"
fi

# Step 4: Build and push Docker image
print_info "Building Docker image..."

# Configure Docker to use gcloud as a credential helper
gcloud auth configure-docker --quiet

# Build the image
docker build -t $IMAGE_URI .

print_success "Docker image built: $IMAGE_URI"

print_info "Pushing Docker image to Google Container Registry..."
docker push $IMAGE_URI

print_success "Docker image pushed successfully"

# Step 5: Create secrets (if they don't exist)
print_info "Setting up secrets..."

# Create placeholder secrets if they don't exist
secrets=(
    "documentai-processor-id"
    "vertex-ai-endpoint-id"
    "storage-bucket-name"
    "kms-key-name"
    "elasticsearch-url"
    "elasticsearch-username"
    "elasticsearch-password"
    "redis-url"
)

for secret in "${secrets[@]}"; do
    if ! gcloud secrets describe $secret --quiet > /dev/null 2>&1; then
        echo "PLACEHOLDER_VALUE" | gcloud secrets create $secret --data-file=-
        print_info "Created placeholder secret: $secret"
    fi
done

print_warning "Please update the secrets with actual values using:"
print_warning "gcloud secrets versions add SECRET_NAME --data-file=path/to/secret/file"

# Step 6: Update Cloud Run service configuration
print_info "Updating Cloud Run service configuration..."

# Replace PROJECT_ID placeholder in the YAML file
sed "s/PROJECT_ID/$PROJECT_ID/g" cloudrun-service.yaml > cloudrun-service-deploy.yaml

# Step 7: Deploy to Cloud Run
print_info "Deploying to Cloud Run..."

gcloud run services replace cloudrun-service-deploy.yaml

print_success "Deployment completed successfully!"

# Step 8: Get service URL
SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region=$REGION --format="value(status.url)")

print_success "Service deployed at: $SERVICE_URL"

# Step 9: Test the deployment
print_info "Testing the deployment..."

if curl -f "$SERVICE_URL/health" > /dev/null 2>&1; then
    print_success "Health check passed! Service is running correctly."
else
    print_warning "Health check failed. Please check the logs:"
    print_warning "gcloud logs read --service=$SERVICE_NAME --limit=50"
fi

# Clean up temporary file
rm -f cloudrun-service-deploy.yaml

print_info "Deployment script completed!"
echo ""
echo "Next steps:"
echo "1. Update secrets with actual values"
echo "2. Configure your frontend to use: $SERVICE_URL"
echo "3. Set up monitoring and alerting"
echo "4. Configure custom domain (optional)"
echo ""
echo "Useful commands:"
echo "  View logs: gcloud logs read --service=$SERVICE_NAME --limit=50"
echo "  Update service: gcloud run services update $SERVICE_NAME --region=$REGION"
echo "  Delete service: gcloud run services delete $SERVICE_NAME --region=$REGION"